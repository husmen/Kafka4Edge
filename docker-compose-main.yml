version: '3'

services:
  kafka-0:
    image: bitnami/kafka:3.4
    container_name: kafka-0
    ports:
      - '9092:9092'
      - '19092'
    environment:
      - KAFKA_NODE_ID=0
      - KAFKA_BROKER_ID=0
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=gdnQy0i5QTe2uzhRxuyYwg
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:19092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:19092
      - ALLOW_PLAINTEXT_LISTENER=yes
      # https://docs.confluent.io/platform/current/installation/docker/operations/monitoring.html
      # https://stackoverflow.com/questions/50524643/kafka-best-practices-how-to-set-recommended-setting-for-jvm
      # - KAFKA_JMX_PORT=7071
      # - KAFKA_JMX_OPTS="-Djava.rmi.server.hostname=kafka-0 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false"
      # - KAFKA_JMX_HOSTNAME=kafka-jmx-0
      # - KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=$J7071"
      # - KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka-0 -Djava.net.preferIPv4Stack=true"
      # - JMX_PORT=7071
      # - KAFKA_OPTS="-javaagent:/usr/app/jmx_prometheus_javaagent.jar=7071:/usr/app/prom-jmx-agent-config.yml"
    volumes:
      - kafka_0_data:/bitnami/kafka
    networks:
      - kafka_cluster

  kafka-1:
    image: bitnami/kafka:3.4
    container_name: kafka-1
    ports:
      - '9093:9092'
      - '19092'
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=gdnQy0i5QTe2uzhRxuyYwg
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:19092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:19092,1@kafka-1:19092,2@kafka-2:19092
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_1_data:/bitnami/kafka
    networks:
      - kafka_cluster

  kafka-2:
    image: bitnami/kafka:3.4
    container_name: kafka-2
    ports:
      - '9094:9092'
      - '19092'
    environment:
      - KAFKA_NODE_ID=2
      - KAFKA_BROKER_ID=2
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_KRAFT_CLUSTER_ID=gdnQy0i5QTe2uzhRxuyYwg
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:19092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:19092,1@kafka-1:19092,2@kafka-2:19092
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_2_data:/bitnami/kafka
    networks:
      - kafka_cluster

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.3.2
  #   container_name: schema-registry
  #   depends_on:
  #     - kafka-0
  #     - kafka-1
  #     - kafka-2
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: "0.0.0.0"
  #     SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:9491"
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-0:9192,kafka-1:9192,kafka-2:9192"
  #   ports:
  #     - "9491:9491"



  # kafka-rest:
  #   image: 'confluentinc/cp-kafka-rest:7.3.2'
  #   container_name: kafka-rest
  #   depends_on:
  #     - kafka-0
  #     - kafka-1
  #     - kafka-2
  #     - schema-registry
  #   environment:
  #     KAFKA_REST_ADVERTISED_LISTENERS: "http://localhost:9391"
  #     # You can't have ACLs without a Kafka authorizer.
  #     KAFKA_REST_API_ENDPOINTS_BLOCKLIST: "api.v3.acls.*"
  #     KAFKA_REST_BOOTSTRAP_SERVERS: "kafka-0:9192,kafka-1:9192,kafka-2:9192"
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:9391"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:9491"
  #     JMX_PORT: 9392
  #   ports:
  #     - "9391:9391"
  #     - "9392:9392"

  mosquitto:
    image: eclipse-mosquitto:2.0.15
    hostname: mosquitto
    container_name: mosquitto
    expose:
      - "1883"
    ports:
      - "1883:1883"

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.3.2
    hostname: kafka-connect
    container_name: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka-0:9092,kafka-1:9092,kafka-2:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/etc/kafka-connect/jars'
      CONNECT_CONFLUENT_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./sink-connector:/etc/kafka-connect/jars
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    networks:
      - kafka_cluster

  mongo-db:
    image: mongo:6.0.4
    hostname: mongo-db
    container_name: mongo-db
    expose:
      - "27017"
    ports:
      - "27017:27017"
    command: --bind_ip_all # --smallfiles
    volumes:
      - ./mongo-db:/data
    networks:
      - kafka_cluster

  mongoclient:
    image: mongoclient/mongoclient:4.0.1
    container_name: mongoclient
    hostname: mongoclient
    depends_on:
      - mongo-db
    ports:
      - 3000:3000
    environment:
      MONGO_URL: "mongodb://mongo-db:27017"
      PORT: 3000
    expose:
      - "3000"
    networks:
      - kafka_cluster
    
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - kafka_cluster

  grafana:
    image: grafana/grafana:9.4.3
    container_name: grafana
    ports:
      - "4000:3000"
    user: '472'
    environment:
      - GF_SECURITY_ADMING_PASSWORD=password
    depends_on:
      - prometheus
    networks:
      - kafka_cluster

  demo-consumer:
    build: 
      context: .
      dockerfile: demo/consumer/Dockerfile
    container_name: demo-consumer
    command: python consumer.py
    networks:
      - kafka_cluster
      

volumes:
  kafka_0_data:
    driver: local
  kafka_1_data:
    driver: local
  kafka_2_data:
    driver: local
  prometheus_data:

networks:
  kafka_cluster:
    driver: bridge
  
